

/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

/**
 * Often, we may want to respond to Atom events, but only after a buffer period
 * of no change.
 * For example, Atom provides Workspace::onDidChangeActivePaneItem, but we may
 * want to know not when the active pane item has changed, buth when it has
 * stopped changing.
 * This file provides methods to do this.
 */

var _require = require('../../commons');

var debounce = _require.debounce;

var DEFAULT_DEBOUNCE_INTERVAL_MS = 100;

/**
 * Similar to Atom's Workspace::onDidChangeActivePaneItem
 * (https://atom.io/docs/api/v1.0.2/Workspace#instance-onDidChangeActivePaneItem),
 * with the addition of a debounce interval.
 * @param debounceInterval The number of milliseconds to debounce.
 */
function onWorkspaceDidStopChangingActivePaneItem(callback) {
  var debounceInterval = arguments.length <= 1 || arguments[1] === undefined ? DEFAULT_DEBOUNCE_INTERVAL_MS : arguments[1];

  var debouncedFunction = debounce(callback, debounceInterval, /* immediate */false);
  return atom.workspace.onDidChangeActivePaneItem(debouncedFunction);
}

module.exports = {
  onWorkspaceDidStopChangingActivePaneItem: onWorkspaceDidStopChangingActivePaneItem
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF0b20tZXZlbnQtZGVib3VuY2UuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7OztlQW9CbUIsT0FBTyxDQUFDLGVBQWUsQ0FBQzs7SUFBcEMsUUFBUSxZQUFSLFFBQVE7O0FBRWYsSUFBTSw0QkFBNEIsR0FBRyxHQUFHLENBQUM7Ozs7Ozs7O0FBUXpDLFNBQVMsd0NBQXdDLENBQzdDLFFBQThCLEVBRWpCO01BRGIsZ0JBQXdCLHlEQUFHLDRCQUE0Qjs7QUFFekQsTUFBTSxpQkFBaUIsR0FBRyxRQUFRLENBQUMsUUFBUSxFQUFFLGdCQUFnQixpQkFBa0IsS0FBSyxDQUFDLENBQUM7QUFDdEYsU0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLHlCQUF5QixDQUFDLGlCQUFpQixDQUFDLENBQUM7Q0FDcEU7O0FBRUQsTUFBTSxDQUFDLE9BQU8sR0FBRztBQUNmLDBDQUF3QyxFQUF4Qyx3Q0FBd0M7Q0FDekMsQ0FBQyIsImZpbGUiOiJhdG9tLWV2ZW50LWRlYm91bmNlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBiYWJlbCc7XG4vKiBAZmxvdyAqL1xuXG4vKlxuICogQ29weXJpZ2h0IChjKSAyMDE1LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBpblxuICogdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuLyoqXG4gKiBPZnRlbiwgd2UgbWF5IHdhbnQgdG8gcmVzcG9uZCB0byBBdG9tIGV2ZW50cywgYnV0IG9ubHkgYWZ0ZXIgYSBidWZmZXIgcGVyaW9kXG4gKiBvZiBubyBjaGFuZ2UuXG4gKiBGb3IgZXhhbXBsZSwgQXRvbSBwcm92aWRlcyBXb3Jrc3BhY2U6Om9uRGlkQ2hhbmdlQWN0aXZlUGFuZUl0ZW0sIGJ1dCB3ZSBtYXlcbiAqIHdhbnQgdG8ga25vdyBub3Qgd2hlbiB0aGUgYWN0aXZlIHBhbmUgaXRlbSBoYXMgY2hhbmdlZCwgYnV0aCB3aGVuIGl0IGhhc1xuICogc3RvcHBlZCBjaGFuZ2luZy5cbiAqIFRoaXMgZmlsZSBwcm92aWRlcyBtZXRob2RzIHRvIGRvIHRoaXMuXG4gKi9cblxuY29uc3Qge2RlYm91bmNlfSA9IHJlcXVpcmUoJy4uLy4uL2NvbW1vbnMnKTtcblxuY29uc3QgREVGQVVMVF9ERUJPVU5DRV9JTlRFUlZBTF9NUyA9IDEwMDtcblxuLyoqXG4gKiBTaW1pbGFyIHRvIEF0b20ncyBXb3Jrc3BhY2U6Om9uRGlkQ2hhbmdlQWN0aXZlUGFuZUl0ZW1cbiAqIChodHRwczovL2F0b20uaW8vZG9jcy9hcGkvdjEuMC4yL1dvcmtzcGFjZSNpbnN0YW5jZS1vbkRpZENoYW5nZUFjdGl2ZVBhbmVJdGVtKSxcbiAqIHdpdGggdGhlIGFkZGl0aW9uIG9mIGEgZGVib3VuY2UgaW50ZXJ2YWwuXG4gKiBAcGFyYW0gZGVib3VuY2VJbnRlcnZhbCBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byBkZWJvdW5jZS5cbiAqL1xuZnVuY3Rpb24gb25Xb3Jrc3BhY2VEaWRTdG9wQ2hhbmdpbmdBY3RpdmVQYW5lSXRlbShcbiAgICBjYWxsYmFjazogKGl0ZW06IG1peGVkKSA9PiBhbnksXG4gICAgZGVib3VuY2VJbnRlcnZhbDogbnVtYmVyID0gREVGQVVMVF9ERUJPVU5DRV9JTlRFUlZBTF9NU1xuICApOiBJRGlzcG9zYWJsZSB7XG4gIGNvbnN0IGRlYm91bmNlZEZ1bmN0aW9uID0gZGVib3VuY2UoY2FsbGJhY2ssIGRlYm91bmNlSW50ZXJ2YWwsIC8qIGltbWVkaWF0ZSAqLyBmYWxzZSk7XG4gIHJldHVybiBhdG9tLndvcmtzcGFjZS5vbkRpZENoYW5nZUFjdGl2ZVBhbmVJdGVtKGRlYm91bmNlZEZ1bmN0aW9uKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIG9uV29ya3NwYWNlRGlkU3RvcENoYW5naW5nQWN0aXZlUGFuZUl0ZW0sXG59O1xuIl19